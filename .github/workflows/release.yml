name: Release Pipeline

on:
  push:
    branches:
      - main

permissions:
  contents: write
  pull-requests: write

jobs:
  release:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Set up JDK
        uses: actions/setup-java@v3
        with:
          java-version: "23"
          distribution: "temurin"
          cache: "maven"

      - name: Determine version bump from PR
        id: version_bump
        run: |
          PR_NUMBER=$(git log -1 --pretty=%B | grep -oP '#\K\d+' || echo "")
          if [ -z "$PR_NUMBER" ]; then
            echo "No PR number found in commit message"
            exit 1
          fi

          LABELS=$(gh pr view $PR_NUMBER --json labels -q '.labels[].name' || echo "")
          if echo "$LABELS" | grep -q "^major$"; then
            echo "BUMP_TYPE=major" >> $GITHUB_OUTPUT
          elif echo "$LABELS" | grep -q "^minor$"; then
            echo "BUMP_TYPE=minor" >> $GITHUB_OUTPUT
          elif echo "$LABELS" | grep -q "^patch$"; then
            echo "BUMP_TYPE=patch" >> $GITHUB_OUTPUT
          else
            echo "No version label found"
            exit 1
          fi
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Update version
        id: update_version
        run: |
          # Read current version components
          MAJOR=$(grep "version.major" version.properties | cut -d'=' -f2)
          MINOR=$(grep "version.minor" version.properties | cut -d'=' -f2)
          PATCH=$(grep "version.patch" version.properties | cut -d'=' -f2)

          # Bump version based on label
          case ${{ steps.version_bump.outputs.BUMP_TYPE }} in
            major)
              MAJOR=$((MAJOR + 1))
              MINOR=0
              PATCH=0
              ;;
            minor)
              MINOR=$((MINOR + 1))
              PATCH=0
              ;;
            patch)
              PATCH=$((PATCH + 1))
              ;;
          esac

          # Update version.properties
          sed -i "s/version.major=.*/version.major=$MAJOR/" version.properties
          sed -i "s/version.minor=.*/version.minor=$MINOR/" version.properties
          sed -i "s/version.patch=.*/version.patch=$PATCH/" version.properties

          # Set new version for later steps
          NEW_VERSION="$MAJOR.$MINOR.$PATCH"
          echo "NEW_VERSION=$NEW_VERSION" >> $GITHUB_OUTPUT

          # Update POM version
          mvn versions:set -DnewVersion=$NEW_VERSION -DgenerateBackupPoms=false

      - name: Build and test
        run: mvn clean package

      # - name: Build and push Docker image
      #   uses: docker/build-push-action@v4
      #   with:
      #     context: .
      #     push: false
      #     tags: |
      #       eduardooolol/${{ github.event.repository.name }}:${{ steps.calculate_version.outputs.NEW_VERSION }}
      #       eduardooolol/${{ github.event.repository.name }}:latest

      - name: Commit version updates
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          git add version.properties pom.xml
          git commit -m "Bump version to v${{ steps.update_version.outputs.NEW_VERSION }}"
          git push

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: v${{ steps.update_version.outputs.NEW_VERSION }}
          name: Release v${{ steps.update_version.outputs.NEW_VERSION }}
          generate_release_notes: true
          draft: false
          prerelease: false
